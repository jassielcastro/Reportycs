CREATE TABLE IF NOT EXISTS Repository (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    owner TEXT NOT NULL,
    repository TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PullRequest (
    id INTEGER NOT NULL PRIMARY KEY,
    repositoryId INTEGER NOT NULL,
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    avatar TEXT NOT NULL,
    FOREIGN KEY (repositoryId) REFERENCES Repository(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Approves (
    pr_id INTEGER NOT NULL,
    user TEXT NOT NULL,
    FOREIGN KEY (pr_id) REFERENCES PullRequest(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PrComments (
    pr_id INTEGER NOT NULL,
    reviewCommentsCount INTEGER NOT NULL,
    FOREIGN KEY (pr_id) REFERENCES PullRequest(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS LastDate (
    date TEXT DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS Owners (
    idOwner INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    repositoryId INTEGER NOT NULL,
    user TEXT NOT NULL,
    FOREIGN KEY (repositoryId) REFERENCES Repository(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Metrics (
    repositoryId INTEGER NOT NULL,
    pullRequestSize INTEGER NOT NULL,
    FOREIGN KEY (repositoryId) REFERENCES Repository(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS TokenContributions (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    token TEXT NOT NULL
);

-- Repository CRUD

insertRepository:
INSERT OR REPLACE INTO
    Repository(owner, repository)
VALUES(?, ?);

selectAllRepositories:
SELECT
    Repository.id,
    Repository.owner,
    Repository.repository
FROM
    Repository;

selectRepository:
SELECT
    Repository.id,
    Repository.owner,
    Repository.repository
FROM
    Repository
WHERE
    Repository.repository = ?;

deleteRepository:
DELETE FROM
    Repository
WHERE
    Repository.id = ?;

-- Owners CRUD

insertOwners:
INSERT OR REPLACE INTO
    Owners(repositoryId, user)
VALUES(?, ?);

selectAllOwners:
SELECT
    Owners.idOwner,
    Owners.repositoryId,
    Owners.user
FROM
    Owners
WHERE
    Owners.repositoryId = ?;

-- Metrics CRUD

insertMetrics:
INSERT OR REPLACE INTO
    Metrics(repositoryId, pullRequestSize)
VALUES(?, ?);

updateMetrics:
UPDATE Metrics
    SET pullRequestSize = ?
WHERE Metrics.repositoryId = ?;

selectAllMetrics:
SELECT
    Metrics.repositoryId,
    Metrics.pullRequestSize
FROM
    Metrics
WHERE
    Metrics.repositoryId = ?;

-- PullRequest CRUD

insertPullRequest:
INSERT OR REPLACE INTO
    PullRequest(id, repositoryId, title, author, avatar)
VALUES(?, ?, ?, ?, ?);

selectAllPullRequest:
SELECT
    PullRequest.id,
    PullRequest.repositoryId,
    PullRequest.title,
    PullRequest.author,
    PullRequest.avatar
FROM
    PullRequest
WHERE
    PullRequest.repositoryId = ?
ORDER BY PullRequest.id DESC
LIMIT ?;

clearPullRequest:
DELETE FROM PullRequest;

-- Date CRUD

setDateOfInsertion:
INSERT OR REPLACE INTO
    LastDate(date)
VALUES(?);

selectLastInsertion:
SELECT
    LastDate.date
FROM
    LastDate;

-- Token for contributions

insertTokenForContributions:
INSERT OR REPLACE INTO
    TokenContributions(name, token)
VALUES(?, ?);

selectAllTokenForContributions:
SELECT
    TokenContributions.id,
    TokenContributions.name,
    TokenContributions.token
FROM
    TokenContributions;

deleteTokenForContributions:
DELETE FROM TokenContributions;
